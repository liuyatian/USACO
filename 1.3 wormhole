#include<iostream>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<sstream>
#include<set>
#include<unordered_set>
#include<map>
#include<unordered_map>
#include<algorithm>
using namespace std;
struct node{
    int x,y;
}nodes[50];
int n,res,fa[50];
bool cmp(node &a,node &b){
    if(a.y==b.y)
        return a.x<b.x;
    return a.y<b.y;
}
bool ishuan(int num,int cur,int start,int into){
    if(num!=1&&cur==start&&into==0)
        return true;
    if(into==0){
        if(nodes[cur].y==nodes[cur+1].y){
            return ishuan(num+1,cur+1,start,1);
        }
        else
            return false;
    }
    else{
        return ishuan(num+1,fa[cur],start,0);
    }
}
bool solver(){
    for(int i=1;i<=n;i++){
        if(ishuan(1,i,i,0))
            return true;
    }
    return false;
}
void dfs(int x){
    if(x==n+1){
        if(solver())
            res++;
        return;
    }
    if(fa[x]==0){
        for(int i=x+1;i<=n;i++){
            if(fa[i]==0){
                fa[i]=x;
                fa[x]=i;
                dfs(x+1);
                fa[i]=0;
                fa[x]=0;
            }
        }
    }
    else{
        dfs(x+1);
    }
}
int main(){
    cin>>n;
    for(int i=1;i<=n;i++)
        cin>>nodes[i].x>>nodes[i].y;
    sort(nodes+1,nodes+n+1,cmp);
    dfs(1);
    cout<<res<<endl;
    return 0;
}
